[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\gchan\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\gchan\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 14.0.2)
[debug]       Load.loadUnit: plugins took 178.748601ms
[debug]       Load.loadUnit: defsScala took 0.5875ms
[debug] [Loading] Scanning directory C:\Users\gchan\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\gchan\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.1252 ms
[debug]           Load.resolveProject(global-plugins) took 67.2953ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\gchan\.sbt\1.0\plugins, plugins: List(<none>))) took 106.8468ms
[debug] [Loading] Done in C:\Users\gchan\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 132.5ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1943ms
[debug]     Load.loadUnit(file:/C:/Users/gchan/.sbt/1.0/plugins/, ...) took 326.089799ms
[debug]   Load.apply: load took 532.217001ms
[debug]   Load.apply: resolveProjects took 5.2969ms
[debug]   Load.apply: finalTransforms took 60.718999ms
[debug]   Load.apply: config.delegates took 6.655299ms
[debug]   Load.apply: Def.make(settings)... took 449.967101ms
[debug]   Load.apply: structureIndex took 113.6633ms
[debug]   Load.apply: mkStreams took 1.428601ms
[info] loading global plugins from C:\Users\gchan\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7592.8166ms
[debug]           Load.loadUnit: plugins took 29.792001ms
[debug]           Load.loadUnit: defsScala took 0.003199ms
[debug] [Loading] Scanning directory C:\SparkScalaCourse\udemy-scala-beginners\project
[debug]             Load.loadUnit: mkEval took 10.9083ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\SparkScalaCourse\udemy-scala-beginners\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.7484 ms
[info] loading settings for project udemy-scala-beginners-build from idea.sbt ...
[debug]               Load.resolveProject(udemy-scala-beginners-build) took 12.1753ms
[debug]             Load.loadTransitive: finalizeProject(Project(id udemy-scala-beginners-build, base: C:\SparkScalaCourse\udemy-scala-beginners\project, plugins: List(<none>))) took 16.8956ms
[debug] [Loading] Done in C:\SparkScalaCourse\udemy-scala-beginners\project, returning: (udemy-scala-beginners-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4145.4302ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.9811ms
[debug]         Load.loadUnit(file:/C:/SparkScalaCourse/udemy-scala-beginners/project/, ...) took 4184.0459ms
[debug]       Load.apply: load took 4185.6095ms
[debug]       Load.apply: resolveProjects took 0.121899ms
[debug]       Load.apply: finalTransforms took 19.5374ms
[debug]       Load.apply: config.delegates took 0.4228ms
[debug]       Load.apply: Def.make(settings)... took 271.0173ms
[debug]       Load.apply: structureIndex took 60.736699ms
[debug]       Load.apply: mkStreams took 0.0041ms
[info] loading project definition from C:\SparkScalaCourse\udemy-scala-beginners\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 10010.4453ms
[debug]     Load.loadUnit: defsScala took 0.006199ms
[debug] [Loading] Scanning directory C:\SparkScalaCourse\udemy-scala-beginners
[debug]       Load.loadUnit: mkEval took 0.576399ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.1042 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 77.6362ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\SparkScalaCourse\udemy-scala-beginners, plugins: List(<none>))) took 84.699299ms
[debug] [Loading] Done in C:\SparkScalaCourse\udemy-scala-beginners, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2009.819399ms
[debug]     Load.loadUnit: cleanEvalClasses took 34.193501ms
[debug]   Load.loadUnit(file:/C:/SparkScalaCourse/udemy-scala-beginners/, ...) took 12055.771001ms
[debug] Load.apply: load took 12058.473701ms
[debug] Load.apply: resolveProjects took 0.2568ms
[debug] Load.apply: finalTransforms took 78.167599ms
[debug] Load.apply: config.delegates took 0.696301ms
[debug] Load.apply: Def.make(settings)... took 121.4121ms
[debug] Load.apply: structureIndex took 76.1889ms
[debug] Load.apply: mkStreams took 0.004901ms
[info] set current project to udemy-scala-beginners (in build file:/C:/SparkScalaCourse/udemy-scala-beginners/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53637 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53637, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to udemy-scala-beginners (in build file:/C:/SparkScalaCourse/udemy-scala-beginners/)
[debug] > Exec(idea-shell, None, None)
